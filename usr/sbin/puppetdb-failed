#!/usr/bin/python

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/puppetdb/puppetdb.json'

#########################################################################
### Declarations ########################################################
#########################################################################

import json, optparse, requests, sys

#########################################################################
### Subroutines #########################################################
#########################################################################

def parseConfig(file):
    """
    Load a json configuration from a configuration file.  Sets a global
    'config' variable.
    """
    global config

    try:
        config = json.load(open(config_file, 'r'))
    except IOError, e:
        print "file error:  %s" % e
        sys.exit (2)
    except Exception, e:
        print "unknown error:  %s" % e
        sys.exit (2)

    return config

#########################################################################
### main () #############################################################
#########################################################################

def main():
    usage = "%prog [options] [HOSTPATTERN]"
    parseConfig(config_file)

    p = optparse.OptionParser (usage = usage,
        description = "query puppetdb for hosts that are tangled")
    p.add_option ('--debug', dest='debug', action='store_true', default=False)
    p.add_option ('--server', dest='server', default=config['server'],
        help="puppetdb server (default: %default)")
    p.add_option ('--nodes_url_base', dest='nodes_url_base',
        default=config['nodes_url_base'],
        help="relative URL to puppetdb for default node query")
    p.add_option ('--event_counts_url_base', dest='event_counts_url_base',
        default=config['event_counts_url_base'],
        help="relative URL to puppetdb for event counts query")

    opt, args = p.parse_args()

    if len(args) < 1:
        host_search = '.*'
    else:
        host_search = args[0]

    try:
        host_query = ['~', 'certname', '^%s$' % host_search ]
        time_query = "['=', 'latest_report?', 'true']"
        query = "['and', %s, %s]" \
            % (host_query, time_query)

        payload = {
          'query':         json.dumps(eval(query)),
          'summarize-by':  'certname',
          'count-by':      'certname',
          'counts-filter': json.dumps(['>', 'failures', 0 ])
        }
    except SyntaxError:
        p.error('Malformed query, check examples for help')

    headers = {'Accept': 'application/json'}
    try:
        url = "%s%s" % ( opt.server, opt.event_counts_url_base )
        r = requests.get(url, headers=headers, params=payload)
        for node in r.json():
            if 'subject' in node:
                print node['subject']['title']

    except Exception, e: 
        p.error(e)
    except:
        p.error('bad json?: %s' % payload)

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-failed - list hosts that failed their last puppet checkin

=head1 SYNOPSYS

B<puppetdb-failed>

B<puppetdb-failed> cmssrv.\*.fnal.gov

=head1 USAGE

puppetdb-failed queries the puppetdb to find out which hosts failed on
their last puppet check-in.  The list is printed on STDOUT, sorted by
the timestamp of that last check-in (oldest first).

=head1 OPTIONS

=over 4

=item I<HOSTPATTERN>

Default host pattern to match.  Defaults to '.*'; remember that you may
need to escape wild cards if you're using this from the CLI.

=item --help

Prints some short help documentation and exits.

=back

=head1 TODO

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

Based in part on https://github.com/JHaals/puppetdb-grep

=head1 COPYRIGHT

Copyright 2014, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
