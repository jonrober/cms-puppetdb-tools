#!/usr/bin/python

#########################################################################
### Configuration #######################################################
#########################################################################

server = 'http://cms-puppet.fnal.gov:8080'
nodes_url     = '%s/v2/nodes' % server
resources_url = '%s/v2/resources' % server

output_string = "%-25s %s: %s"

#########################################################################
### Declarations ########################################################
#########################################################################

from datetime import datetime, timedelta
import dateutil.parser, dateutil.tz
import json, optparse, requests, sys

#########################################################################
### Subroutines #########################################################
#########################################################################

def node_resources(node, type, title):
    """
    """

    url = "%s/%s/resources" % (nodes_url, node)
    if type is not None:
        url = "%s/%s" % (url, type)
    if title is not None:
        url = "%s/%s" % (url, title)
    headers = { 'Accept': 'application/json' }

    r = requests.get(url, headers=headers, verify=False)
    try:
        r = requests.get(url, headers=headers, verify=False)
    except Exception, e:
        raise Exception('%s (bad url?: %s)' % (e, url))

    resources = []
    for resource in r.json():
        resources.append(resource)
    
    return resources

#########################################################################
### main () #############################################################
#########################################################################

def main():
    usage = "%prog [options] [HOSTPATTERN [TYPE [TITLE]]"
    p = optparse.OptionParser (usage = usage,
        description = "query puppetdb for resources from matching hosts")

    opt, args = p.parse_args()

    if len(args) < 1: 
        p.print_help()
        sys.exit(-1)
    else:             host_search = args[0]

    if len(args) >= 2: resource_type  = args[1]
    else:              resource_type  = None

    if len(args) >= 3: resource_title = args[2]
    else:              resource_title = None

    query = "['~', ['fact', 'fqdn'], '^%s$']" % host_search
    try:
        payload = { 'query': json.dumps(eval(query))}
    except SyntaxError:
        p.error('Malformed query, check examples for help')

    headers = {'Accept': 'application/json'}
    try:
        r = requests.get(nodes_url, headers=headers, params=payload, verify=False)
    except Exception, e:
        p.error('%s (bad json?: %s)' % (e, payload))

    if len(r.json()) == 0:
        print "no matches"
        sys.exit(-1)

    output = []
    for node in r.json():
        name = node['name']
        resources = node_resources(name, resource_type, resource_title)
        if len(resources) > 0:
            for i in resources:
                for key in sorted(i.keys()):
                    value = i[key]
                    if isinstance(value, dict):
                        print "%s:" % key
                        for j in sorted(value.keys()):
                            print "    %s: %s" % (j, value[j])
                    elif isinstance(value, list):
                        print "%s: %s " % (key, ', '.join(value))
                    else:
                        print "%s: %s" % (key, value)
                print ""
        else:
            print "no matching resources for %s" % name
            print ""

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-node-resources - list resources on a per-host basis

=head1 SYNOPSYS

B<puppetdb-node-resources> cmssrv167.fnal.gov

B<puppetdb-node-resources> cmssrv167.fnal.gov Package

B<puppetdb-node-resources> cmssrv167.fnal.gov Package stunnel

=head1 USAGE

puppetdb-node-resources queries the puppetdb to find resources on matching
hosts.  The resource information is printed to stdout.

If there are no matching entries for that host, 

=head1 OPTIONS

=over 4

=item I<HOSTPATTERN>

Default host pattern to match.  Defaults to '.*'; remember that you may
need to escape wild cards if you're using this from the CLI.

=item I<TYPE>

Resource type to match.  Optional.  A few examples: Package, Class,
Service, File.

=item I<TITLE>

Title of the resource to match.  Optional.  Some example packages:

=over 4

=item Package

F<pakiti-client>; F<zz_fermi_ssh_config>

=item Class

F<Yum::Autoupdate>; F:Nfs::Client>

=item Service

F<ntpdate>; F<sshd>

=item File

F</var/lib/rsyslog/>; F</etc/ntp.conf>

=back

=item --help

Prints some short help documentation and exits.

=back

=head1 TODO

Make this more configurable, instead of putting the server in the local
script.

It would be nice to have a better 'pretty-print' option.  

It may, perhaps, be good to have searches based on resources instead of
hostname.

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

Based in part on https://github.com/JHaals/puppetdb-grep

=head1 COPYRIGHT

Copyright 2013, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
