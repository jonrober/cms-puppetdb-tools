#!/usr/bin/python

#########################################################################
### Configuration #######################################################
#########################################################################

server = 'http://cms-puppet.fnal.gov:8080'
nodes_url = '%s/v2/nodes' % server
facts_url = '%s/v2/facts' % server

hours = 48
output_string = "%-30s %s"

#########################################################################
### Declarations ########################################################
#########################################################################

from datetime import datetime, timedelta
import dateutil.parser, dateutil.tz
import json, optparse, requests, sys

#########################################################################
### Subroutines #########################################################
#########################################################################

def node_too_old(node, hours):
    """
    Has it been too long since the node has checked in?  Returns True if
    so, False otherwise.

    'node' is a json object; 'hours' is the number of hours that counts
    as "too old".  "Has never checked in" counts as "too long".
    """
    ts = time_from_timestamp(node['report_timestamp'])
    if ts is False: return True

    now = datetime.now(dateutil.tz.tzlocal())
    delta = timedelta(hours=hours)

    diff = now - ts
    if diff > delta: return True
    else:            return False

def node_print(node):
    """
    Create a human-readable string saying how long it's been since a node
    has checked in.
    """
    name = node['name']

    ts = time_from_timestamp(node['report_timestamp'])
    if ts is False: ts_string = "***never checked in***"
    else:           ts_string = ts.strftime("%Y-%m-%d %H:%M:%S %Z")
    return output_string % (name, ts_string)

def time_from_timestamp(timestamp):
    """
    Parse a timestamp with dateutil.parser.parse(), and set to the local
    timezone.  This is still usable for date math.
    """
    if timestamp is None:
        return False

    ts = dateutil.parser.parse(timestamp)
    local = ts.astimezone(dateutil.tz.tzlocal())
    return local

#########################################################################
### main () #############################################################
#########################################################################

def main():
    usage = "%prog [options] [HOSTPATTERN]"
    p = optparse.OptionParser (usage = usage,
        description = "query puppetdb for hosts that are too quiet")
    p.add_option ('--hours', dest='hours', default=hours, type='int',
        help='how many hours is "too many"?  default: %default')

    opt, args = p.parse_args()

    if len(args) < 1:
        host_search = '.*'
    else:
        host_search = args[0]

    query = "['~', ['fact', 'fqdn'], '^%s$']" % host_search
    try:
        payload = { 'query': json.dumps(eval(query))}
    except SyntaxError:
        p.error('Malformed query, check examples for help')

    headers = {'Accept': 'application/json'}
    try:
        r = requests.get(nodes_url, headers=headers, params=payload, verify=False)
        items = []
        for node in r.json():
            if node_too_old(node, opt.hours):
                items.append(node_print(node))

    except:
        p.error('bad json?: %s' % payload)

    if len(items) > 0:
        # print output_string % ('Hostname', 'Last Check-In')
        # print output_string % ('--------', '-------------')
        for i in items: print i

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-tooquiet - list hosts that haven't checked in recently, or at all

=head1 SYNOPSYS

B<puppetdb-tooquiet>

B<puppetdb-tooquiet> --hours 48

B<puppetdb-tooquiet> cmssrv.\*.fnal.gov --hours 0

=head1 USAGE

puppetdb-tooquiet queries the puppetdb to find out which hosts have not
checked in recently (where 'recently' is defined as 48 hours, though this
is configurable).  The list is printed on STDOUT.

=head1 OPTIONS

=over 4

=item I<HOSTPATTERN>

Default host pattern to match.  Defaults to '.*'; remember that you may
need to escape wild cards if you're using this from the CLI.

=item --hours I<HOURS>

How many hours is too many?  Defaults to 48; set to 0 if you want to list
all hosts and their last checked-in date.

=item --help

Prints some short help documentation and exits.

=back

=head1 TODO

Make this more configurable, instead of putting the server in the local
script.

Write a script to send mail based on the contents of this script.

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

Based in part on https://github.com/JHaals/puppetdb-grep

=head1 COPYRIGHT

Copyright 2013, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
